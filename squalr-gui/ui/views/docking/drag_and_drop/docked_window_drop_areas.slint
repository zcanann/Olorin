import { Theme } from "../../../theme.slint";

import { DockRootViewModelBindings, DockedWindowViewData, RedockTarget } from "../../../view_model_bindings.slint";

export component DockedWindowDropAreas inherits Rectangle {
    in_out property <DockedWindowViewData> docked_window_data;
    in property <length> resize_padding;
    in property <length> footer_padding;
    property <percent> edge_drop_fill_ratio: 25%;
    x: resize_padding;
    y: resize_padding;
    width: root.docked_window_data.width - resize_padding * 2;
    height: root.docked_window_data.height - resize_padding * 2 - footer_padding;
    // Left split drop area
    Rectangle {
        x: 0;
        y: root.height * edge_drop_fill_ratio;
        width: root.width * edge_drop_fill_ratio;
        height: root.height - root.height * edge_drop_fill_ratio * 2;
        border_width: 2px;
        left_touch_area := TouchArea {
            mouse_cursor: MouseCursor.grabbing;
            pointer_event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active_dragged_window_id != "") {
                    DockRootViewModelBindings.is_dragging_window = false;
                    DockRootViewModelBindings.try_redock_window(DockRootViewModelBindings.active_dragged_window_id, root.docked_window_data.identifier, RedockTarget.left);
                    DockRootViewModelBindings.active_dragged_window_id = "";
                }
            }
        }

        states [
            _ when !left_touch_area.has_hover: {
                background: Theme.selected_background;
                border_color: Theme.selected_border;
            }
            _ when left_touch_area.has_hover: {
                background: Theme.selected_background.darker(0.3);
                border_color: Theme.selected_border;
            }
        ]
    }
    // Right split drop area
    Rectangle {
        x: root.width - root.width * edge_drop_fill_ratio;
        y: root.height * edge_drop_fill_ratio;
        width: root.width * edge_drop_fill_ratio;
        height: root.height - root.height * edge_drop_fill_ratio * 2;
        border_width: 2px;
        right_touch_area := TouchArea {
            mouse_cursor: MouseCursor.grabbing;
            pointer_event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active_dragged_window_id != "") {
                    DockRootViewModelBindings.is_dragging_window = false;
                    DockRootViewModelBindings.try_redock_window(DockRootViewModelBindings.active_dragged_window_id, root.docked_window_data.identifier, RedockTarget.right);
                    DockRootViewModelBindings.active_dragged_window_id = "";
                }
            }
        }

        states [
            _ when !right_touch_area.has_hover: {
                background: Theme.selected_background;
                border_color: Theme.selected_border;
            }
            _ when right_touch_area.has_hover: {
                background: Theme.selected_background.darker(0.3);
                border_color: Theme.selected_border;
            }
        ]
    }
    // Top split drop area
    Rectangle {
        x: root.width * edge_drop_fill_ratio;
        y: 0;
        width: root.width - root.width * edge_drop_fill_ratio * 2;
        height: root.height * edge_drop_fill_ratio;
        border_width: 2px;
        top_touch_area := TouchArea {
            mouse_cursor: MouseCursor.grabbing;
            pointer_event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active_dragged_window_id != "") {
                    DockRootViewModelBindings.is_dragging_window = false;
                    DockRootViewModelBindings.try_redock_window(DockRootViewModelBindings.active_dragged_window_id, root.docked_window_data.identifier, RedockTarget.up);
                    DockRootViewModelBindings.active_dragged_window_id = "";
                }
            }
        }

        states [
            _ when !top_touch_area.has_hover: {
                background: Theme.selected_background;
                border_color: Theme.selected_border;
            }
            _ when top_touch_area.has_hover: {
                background: Theme.selected_background.darker(0.3);
                border_color: Theme.selected_border;
            }
        ]
    }
    // Bottom split drop area
    Rectangle {
        x: root.width * edge_drop_fill_ratio;
        y: root.height - root.height * edge_drop_fill_ratio;
        width: root.width - root.width * edge_drop_fill_ratio * 2;
        height: root.height * edge_drop_fill_ratio;
        border_width: 2px;
        bottom_touch_area := TouchArea {
            mouse_cursor: MouseCursor.grabbing;
            pointer_event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active_dragged_window_id != "") {
                    DockRootViewModelBindings.is_dragging_window = false;
                    DockRootViewModelBindings.try_redock_window(DockRootViewModelBindings.active_dragged_window_id, root.docked_window_data.identifier, RedockTarget.down);
                    DockRootViewModelBindings.active_dragged_window_id = "";
                }
            }
        }

        states [
            _ when !bottom_touch_area.has_hover: {
                background: Theme.selected_background;
                border_color: Theme.selected_border;
            }
            _ when bottom_touch_area.has_hover: {
                background: Theme.selected_background.darker(0.3);
                border_color: Theme.selected_border;
            }
        ]
    }
    // Center tab drop area
    Rectangle {
        x: root.width / 2 - root.width * edge_drop_fill_ratio;
        y: root.height / 2 - root.height * edge_drop_fill_ratio;
        width: root.width * edge_drop_fill_ratio * 2;
        height: root.height * edge_drop_fill_ratio * 2;
        border_width: 2px;
        center_touch_area := TouchArea {
            mouse_cursor: MouseCursor.grabbing;
            pointer_event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active_dragged_window_id != "") {
                    DockRootViewModelBindings.is_dragging_window = false;
                    DockRootViewModelBindings.try_redock_window(DockRootViewModelBindings.active_dragged_window_id, root.docked_window_data.identifier, RedockTarget.center);
                    DockRootViewModelBindings.active_dragged_window_id = "";
                }
            }
        }

        states [
            _ when !center_touch_area.has_hover: {
                background: Theme.selected_background;
                border_color: Theme.selected_border;
            }
            _ when center_touch_area.has_hover: {
                background: Theme.selected_background.darker(0.3);
                border_color: Theme.selected_border;
            }
        ]
    }
}
