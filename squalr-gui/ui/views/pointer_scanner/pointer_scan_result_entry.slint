import { Theme } from "../../theme.slint";
import { PointerScanResultsViewModelBindings, ScanResultViewData } from "../../view_model_bindings.slint";
import { IconConverter } from "../../converters/icon_converter.slint";

import { Button } from "../../components/buttons/button.slint";
import { Checkbox } from "../../components/checkboxes/checkbox.slint";

export component PointerScanResultEntry inherits Button {
    in property <ScanResultViewData> scan_result_view_data;
    in property <length> address_splitter_location;
    in property <length> current_values_splitter_location;
    in property <length> previous_values_splitter_location;
    in property <int> index;
    in property <bool> is_selected;
    callback on_select_start(x: length, y: length);
    callback on_select_end(x: length, y: length);
    height: 24px;
    icon_converter := IconConverter { }

    clicked(event, x, y) => {
        if event.modifiers.shift {
            root.on_select_end(x, y);
        } else {
            root.on_select_start(x, y);
        }
    }
    Rectangle {
        background: root.is_selected ? Theme.selected_background : Theme.transparent;
        Checkbox {
            x: 8px;
            is_checked: scan_result_view_data.is_frozen;
            check_changed(value) => {
                PointerScanResultsViewModelBindings.set_scan_result_frozen(root.index, value);
            }
        }

        HorizontalLayout {
            x: root.address_splitter_location + 8px;
            padding: 0px;
            spacing: 4px;
            VerticalLayout {
                alignment: center;
                Image {
                    width: 16px;
                    height: 16px;
                    horizontal_alignment: center;
                    vertical_alignment: center;
                    source: icon_converter.icon_view_to_image(icon_converter.icon_id_to_view(scan_result_view_data.icon_id));
                }
            }

            Text {
                color: Theme.hex_green;
                horizontal_alignment: left;
                vertical_alignment: center;
                text: scan_result_view_data.address;
                font_family: Theme.mono_font_family;
            }
        }

        Text {
            x: current_values_splitter_location + 8px;
            color: Theme.foreground;
            horizontal_alignment: left;
            vertical_alignment: center;
            text: scan_result_view_data.current_value;
            font_family: Theme.mono_font_family;
        }

        Text {
            x: previous_values_splitter_location + 8px;
            color: Theme.foreground;
            horizontal_alignment: left;
            vertical_alignment: center;
            text: scan_result_view_data.previous_value;
            font_family: Theme.mono_font_family;
        }
    }
}
