import { Slider } from "std-widgets.slint";

import { Theme } from "../../theme.slint";

import { ScanSettingsViewModelBindings } from "../../view_model_bindings.slint";
import { SettingChooserFloatingPointTolerance } from "groups/floating_point_tolerance/setting_chooser_floating_point_tolerance.slint";
import { SettingChooserMemoryAlignment } from "groups/memory_alignment/setting_chooser_memory_alignment.slint";
import { SettingChooserMemoryReadMode } from "groups/memory_read_mode/setting_chooser_memory_read_mode.slint";
import { GroupBox } from "../../components/groupbox.slint";
import { Button } from "../../components/buttons/button.slint";
import { TextField } from "../../components/input/text_field.slint";
import { Checkbox } from "../../components/checkboxes/checkbox.slint";
import { TextCheckbox } from "../../components/checkboxes/text_checkbox.slint";
import { BevelButton } from "../../components/buttons/bevel_button.slint";
import { ContextMenu } from "../../components/context_menu/context_menu.slint";

export component SettingsTabScan inherits Rectangle {
    GridLayout {
        padding: 8px;
        spacing: 8px;
        Row {
            GroupBox {
                header_text: "Memory Read Intervals";
                VerticalLayout {
                    alignment: start;
                    padding: 0px;
                    spacing: 6px;
                    GridLayout {
                        spacing: 8px;
                        Row {
                            HorizontalLayout {
                                spacing: 8px;
                                page_size_slider := Slider {
                                    width: 128px;
                                    minimum: 8;
                                    maximum: 128;
                                    value: 22;
                                    step: 1;
                                }

                                Text {
                                    width: 32px;
                                    horizontal_alignment: center;
                                    color: Theme.foreground;
                                    text: round(page_size_slider.value);
                                }
                            }

                            Text {
                                vertical_alignment: center;
                                text: @tr("Results page size");
                                color: Theme.foreground;
                            }
                        }

                        Row {
                            HorizontalLayout {
                                spacing: 8px;
                                freeze_interval_slider := Slider {
                                    width: 128px;
                                    minimum: 0;
                                    maximum: 2000;
                                    value: 200;
                                    step: 1;
                                }

                                Text {
                                    horizontal_alignment: center;
                                    color: Theme.foreground;
                                    text: round(freeze_interval_slider.value);
                                }
                            }

                            Text {
                                vertical_alignment: center;
                                text: @tr("Freeze interval (ms)");
                                color: Theme.foreground;
                            }
                        }

                        Row {
                            HorizontalLayout {
                                spacing: 8px;
                                project_read_interval_slider := Slider {
                                    width: 128px;
                                    minimum: 0;
                                    maximum: 2000;
                                    value: ScanSettingsViewModelBindings.project_read_interval;
                                    step: 1;
                                    changed(value) => {
                                        ScanSettingsViewModelBindings.project_read_interval = round(value);
                                        ScanSettingsViewModelBindings.project_read_interval_changed(round(value));
                                    }
                                }

                                Text {
                                    horizontal_alignment: center;
                                    color: Theme.foreground;
                                    text: round(project_read_interval_slider.value);
                                }
                            }

                            Text {
                                vertical_alignment: center;
                                text: @tr("Project read interval (ms)");
                                color: Theme.foreground;
                            }
                        }

                        Row {
                            HorizontalLayout {
                                spacing: 8px;
                                result_read_interval_slider := Slider {
                                    width: 128px;
                                    minimum: 0;
                                    maximum: 2000;
                                    value: ScanSettingsViewModelBindings.results_read_interval;
                                    step: 1;
                                    changed(value) => {
                                        ScanSettingsViewModelBindings.results_read_interval = round(value);
                                        ScanSettingsViewModelBindings.results_read_interval_changed(round(value));
                                    }
                                }

                                Text {
                                    horizontal_alignment: center;
                                    color: Theme.foreground;
                                    text: round(result_read_interval_slider.value);
                                }
                            }

                            Text {
                                vertical_alignment: center;
                                text: @tr("Result read interval (ms)");
                                color: Theme.foreground;
                            }
                        }
                    }
                }
            }
        }

        GroupBox {
            header_text: "Scan Params";
            VerticalLayout {
                alignment: start;
                padding: 0px;
                spacing: 6px;
                GridLayout {
                    spacing: 8px;
                    Row {
                        SettingChooserMemoryAlignment { }

                        Text {
                            vertical_alignment: center;
                            text: @tr("Memory Alignment");
                            color: Theme.foreground;
                        }
                    }

                    Row {
                        SettingChooserFloatingPointTolerance { }

                        Text {
                            vertical_alignment: center;
                            text: @tr("Floating Point Tolerance");
                            color: Theme.foreground;
                        }
                    }

                    Row {
                        SettingChooserMemoryReadMode { }

                        Text {
                            vertical_alignment: center;
                            text: @tr("Memory Read Mode");
                            color: Theme.foreground;
                        }
                    }
                }
            }
        }

        Row {
            GroupBox {
                header_text: "Scan Internals";
                VerticalLayout {
                    alignment: start;
                    padding: 0px;
                    spacing: 6px;
                    TextCheckbox {
                        text: @tr("Force single threaded scan");
                        is_checked <=> ScanSettingsViewModelBindings.is_single_threaded_scan;
                        check_changed(value) => {
                            ScanSettingsViewModelBindings.is_single_threaded_scan = value;
                            ScanSettingsViewModelBindings.is_single_threaded_scan_changed(value);
                        }
                    }

                    TextCheckbox {
                        text: @tr("Perform extra debug validation scan");
                        is_checked <=> ScanSettingsViewModelBindings.debug_perform_validation_scan;
                        check_changed(value) => {
                            ScanSettingsViewModelBindings.debug_perform_validation_scan = value;
                            ScanSettingsViewModelBindings.debug_perform_validation_scan_changed(value);
                        }
                    }
                }
            }
        }
    }
}
