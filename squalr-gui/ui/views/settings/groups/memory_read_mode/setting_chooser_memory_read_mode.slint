import { Theme } from "../../../../theme.slint";

import { SettingChooserMemoryReadModeEntry } from "setting_chooser_memory_read_mode_entry.slint";
import { ConversionsViewModelBindings, ScanSettingsViewModelBindings, MemoryReadModeView } from "../../../../view_model_bindings.slint";
import { MemoryReadModeIconConverter } from "../../../../converters/memory_read_mode_icon_converter.slint";
import { IconConverter } from "../../../../converters/icon_converter.slint";
import { Button } from "../../../../components/buttons/button.slint";
import { ContextMenu } from "../../../../components/context_menu/context_menu.slint";

export component SettingChooserMemoryReadMode inherits Rectangle {
    memory_read_mode_icon_converter := MemoryReadModeIconConverter { }

    icon_converter := IconConverter { }

    min_width: 96px;
    HorizontalLayout {
        padding: 0px;
        spacing: 0px;
        memory_alignment_dropdown_button := Button {
            height: 24px;
            clicked => {
                memory_read_mode_context_menu.show();
            }
            Rectangle {
                background: Theme.background_control;
                border_color: Theme.submenu_border;
                border_width: 1px;
                border_radius: 1px;
                VerticalLayout {
                    alignment: center;
                    HorizontalLayout {
                        padding_left: 4px;
                        padding_right: 8px;
                        alignment: start;
                        spacing: 8px;
                        Image {
                            width: 16px;
                            height: 16px;
                            horizontal_alignment: center;
                            vertical_alignment: center;
                            source: icon_converter.icon_view_to_image(memory_read_mode_icon_converter.memory_read_mode_source(ScanSettingsViewModelBindings.memory_read_mode));
                        }

                        Text {
                            color: Theme.foreground;
                            horizontal_alignment: left;
                            vertical_alignment: center;
                            text: ConversionsViewModelBindings.get_memory_read_mode_string(ScanSettingsViewModelBindings.memory_read_mode);
                        }
                    }
                }
            }

            HorizontalLayout {
                alignment: end;
                padding_right: 4px;
                Image {
                    source: @image_url("../../../../images/navigation/down_arrow_small.png");
                }
            }

            HorizontalLayout {
                alignment: end;
                padding_right: 24px;
                Rectangle {
                    background: Theme.submenu_border;
                    width: 1px;
                }
            }
        }
    }

    memory_read_mode_context_menu := ContextMenu {
        close_policy: close_on_click_outside;
        x: memory_alignment_dropdown_button.x;
        y: memory_alignment_dropdown_button.y + memory_alignment_dropdown_button.height;
        Rectangle {
            background: Theme.background_control;
            border_color: Theme.submenu_border;
            border_width: 1px;
            min_width: memory_alignment_dropdown_button.width - self.border_width * 2;
            VerticalLayout {
                padding: 0px;
                spacing: 0px;
                SettingChooserMemoryReadModeEntry {
                    memory_read_mode: MemoryReadModeView.skip;
                    onClicked => {
                        memory_read_mode_context_menu.close();
                    }
                }

                SettingChooserMemoryReadModeEntry {
                    memory_read_mode: MemoryReadModeView.read_interleaved_with_scan;
                    onClicked => {
                        memory_read_mode_context_menu.close();
                    }
                }

                SettingChooserMemoryReadModeEntry {
                    memory_read_mode: MemoryReadModeView.read_before_scan;
                    onClicked => {
                        memory_read_mode_context_menu.close();
                    }
                }
            }
        }
    }
}
