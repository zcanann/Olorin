import { HorizontalBox, VerticalBox, Palette, GridBox } from "std-widgets.slint";

import { Theme } from "./../theme.slint";

import { ContextMenu } from "./../components/context_menu/context_menu.slint";
import { Button } from "../components/buttons/button.slint";
import { DataTypeButton } from "data_type_button.slint";
import { ManualScanViewModelBindings, DataTypeView } from "../view_model_bindings.slint";

export component DataTypeSelector inherits Rectangle {
    background: Theme.background-control;
    border-color: Theme.submenu-border;
    border-width: 1px;
    width: 84px;
    function data_type_string(data_type_view: DataTypeView) -> string {
        if (data_type_view == DataTypeView.i8) {
            return "i8";
        } else if (data_type_view == DataTypeView.u8) {
            return "u8";
        } else if (data_type_view == DataTypeView.i16) {
            return "i16";
        } else if (data_type_view == DataTypeView.i16be) {
            return "i16 (BE)";
        } else if (data_type_view == DataTypeView.u16) {
            return "u16";
        } else if (data_type_view == DataTypeView.u16be) {
            return "u16 (BE)";
        } else if (data_type_view == DataTypeView.i32) {
            return "i32";
        } else if (data_type_view == DataTypeView.i32be) {
            return "i32 (BE)";
        } else if (data_type_view == DataTypeView.u32) {
            return "u32";
        } else if (data_type_view == DataTypeView.u32be) {
            return "u32 (BE)";
        } else if (data_type_view == DataTypeView.u64) {
            return "u64";
        } else if (data_type_view == DataTypeView.u64be) {
            return "u64 (BE)";
        } else if (data_type_view == DataTypeView.i64) {
            return "i64";
        } else if (data_type_view == DataTypeView.i64be) {
            return "i64 (BE)";
        } else if (data_type_view == DataTypeView.f32) {
            return "f32";
        } else if (data_type_view == DataTypeView.f32be) {
            return "f32 (BE)";
        } else if (data_type_view == DataTypeView.f64) {
            return "f64";
        } else if (data_type_view == DataTypeView.f64be) {
            return "f64 (BE)";
        } else if (data_type_view == DataTypeView.aob) {
            return "u8 [ ]";
        } else if (data_type_view == DataTypeView.str) {
            return "String";
        }
        return @tr("Data Type");
    }
    function data_type_source(data_type_view: DataTypeView) -> image {
        if (data_type_view == DataTypeView.i8) {
            return @image-url("./../images/data_types/blue_blocks_1.png");
        } else if (data_type_view == DataTypeView.u8) {
            return @image-url("./../images/data_types/purple_blocks_1.png");
        } else if (data_type_view == DataTypeView.i16) {
            return @image-url("./../images/data_types/blue_blocks_2.png");
        } else if (data_type_view == DataTypeView.i16be) {
            return @image-url("./../images/data_types/blue_blocks_2.png");
        } else if (data_type_view == DataTypeView.u16) {
            return @image-url("./../images/data_types/purple_blocks_2.png");
        } else if (data_type_view == DataTypeView.u16be) {
            return @image-url("./../images/data_types/purple_blocks_2.png");
        } else if (data_type_view == DataTypeView.i32) {
            return @image-url("./../images/data_types/blue_blocks_4.png");
        } else if (data_type_view == DataTypeView.i32be) {
            return @image-url("./../images/data_types/blue_blocks_4.png");
        } else if (data_type_view == DataTypeView.u32) {
            return @image-url("./../images/data_types/purple_blocks_4.png");
        } else if (data_type_view == DataTypeView.u32be) {
            return @image-url("./../images/data_types/purple_blocks_4.png");
        } else if (data_type_view == DataTypeView.i64) {
            return @image-url("./../images/data_types/blue_blocks_8.png");
        } else if (data_type_view == DataTypeView.i64be) {
            return @image-url("./../images/data_types/blue_blocks_8.png");
        } else if (data_type_view == DataTypeView.u64) {
            return @image-url("./../images/data_types/purple_blocks_8.png");
        } else if (data_type_view == DataTypeView.u64be) {
            return @image-url("./../images/data_types/purple_blocks_8.png");
        } else if (data_type_view == DataTypeView.f32) {
            return @image-url("./../images/data_types/orange_blocks_4.png");
        } else if (data_type_view == DataTypeView.f32be) {
            return @image-url("./../images/data_types/orange_blocks_4.png");
        } else if (data_type_view == DataTypeView.f64) {
            return @image-url("./../images/data_types/orange_blocks_8.png");
        } else if (data_type_view == DataTypeView.f64be) {
            return @image-url("./../images/data_types/orange_blocks_8.png");
        } else if (data_type_view == DataTypeView.aob) {
            return @image-url("./../images/data_types/blue_blocks_array.png");
        } else if (data_type_view == DataTypeView.str) {
            return @image-url("./../images/projects/static_type.png");
        }
        return @image-url("./../images/data_types/blue_blocks_4.png");
    }
    data-type-button := Button {
        width: 100%;
        height: 100%;
        tooltip-text: @tr("Select a data type...");
        click-sound: "";
        clicked => {
            context-menu.show();
        }
        HorizontalLayout {
            padding-top: 0px;
            padding-bottom: 0px;
            padding-left: 8px;
            padding-right: 0px;
            HorizontalBox {
                alignment: start;
                padding: 0px;
                spacing: 4px;
                VerticalLayout {
                    alignment: center;
                    Image {
                        width: 16px;
                        height: 16px;
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        source: root.data_type_source(ManualScanViewModelBindings.active_data_type);
                    }
                }

                VerticalLayout {
                    alignment: center;
                    Text {
                        text: root.data_type_string(ManualScanViewModelBindings.active_data_type);
                        color: Theme.foreground;
                        horizontal-alignment: left;
                        vertical-alignment: center;
                    }
                }
            }
        }
    }

    context-menu := ContextMenu {
        x: data-type-button.x;
        y: data-type-button.y + data-type-button.height;
        width: 192px;
        content := GridLayout {
            padding: 0px;
            spacing: 0px;
            Row {
                data-type-u8 := DataTypeButton {
                    text: @tr("u8");
                    icon: @image-url("./../images/data_types/purple_blocks_1.png");
                    tooltip-text: @tr("Data Type: u8. Size: 1 byte. Also known as an unsigned byte, or byte.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u8;
                    }
                }

                data-type-i8 := DataTypeButton {
                    text: @tr("i8");
                    icon: @image-url("./../images/data_types/blue_blocks_1.png");
                    tooltip-text: @tr("Data Type: i8. Size: 1 byte. Also known as a signed byte, or sbyte.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i8;
                    }
                }
            }

            Row {
                data-type-i16 := DataTypeButton {
                    text: @tr("i16");
                    icon: @image-url("./../images/data_types/blue_blocks_2.png");
                    tooltip-text: @tr("Data Type: i16. Size: 2 bytes. Also known as a (signed) short integer, or short.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i16;
                    }
                }

                data-type-i16be := DataTypeButton {
                    text: @tr("i16 (BE)");
                    icon: @image-url("./../images/data_types/blue_blocks_2.png");
                    tooltip-text: @tr("Data Type: i16 (Big Endian). Size: 2 bytes. Also known as a (signed) short integer, or short. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i16be;
                    }
                }
            }

            Row {
                data-type-i32 := DataTypeButton {
                    text: @tr("i32");
                    icon: @image-url("./../images/data_types/blue_blocks_4.png");
                    tooltip-text: @tr("Data Type: i32. Size: 4 bytes. Also known as a (signed) integer, or int.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i32;
                    }
                }

                data-type-i32be := DataTypeButton {
                    text: @tr("i32 (BE)");
                    icon: @image-url("./../images/data_types/blue_blocks_4.png");
                    tooltip-text: @tr("Data Type: i32 (Big Endian). Size: 4 bytes. Also known as a (signed) integer, or int. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i32be;
                    }
                }
            }

            Row {
                data-type-i64 := DataTypeButton {
                    text: @tr("i64");
                    icon: @image-url("./../images/data_types/blue_blocks_8.png");
                    tooltip-text: @tr("Data Type: i64. Size: 8 bytes. Also known as a (signed) long integer, long long, or long.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i64;
                    }
                }

                data-type-i64be := DataTypeButton {
                    text: @tr("i64 (BE)");
                    icon: @image-url("./../images/data_types/blue_blocks_8.png");
                    tooltip-text: @tr("Data Type: i64 (Big Endian). Size: 8 bytes. Also known as a (signed) long integer, long long, or long. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.i64be;
                    }
                }
            }

            Row {
                data-type-u16 := DataTypeButton {
                    text: @tr("u16");
                    icon: @image-url("./../images/data_types/purple_blocks_2.png");
                    tooltip-text: @tr("Data Type: u16. Size: 2 bytes. Also known as an unsigned short integer, unsigned short, or ushort.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u16;
                    }
                }

                data-type-u16be := DataTypeButton {
                    text: @tr("u16 (BE)");
                    icon: @image-url("./../images/data_types/purple_blocks_2.png");
                    tooltip-text: @tr("Data Type: u16 (Big Endian). Size: 2 bytes. Also known as an unsigned short integer, unsigned short, or ushort. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u16be;
                    }
                }
            }

            Row {
                data-type-u32 := DataTypeButton {
                    text: @tr("u32");
                    icon: @image-url("./../images/data_types/purple_blocks_4.png");
                    tooltip-text: @tr("Data Type: u32. Size: 4 bytes. Also known as an unsigned integer, unsigned int, or uint.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u32;
                    }
                }

                data-type-u32be := DataTypeButton {
                    text: @tr("u32 (BE)");
                    icon: @image-url("./../images/data_types/purple_blocks_4.png");
                    tooltip-text: @tr("Data Type: u32 (Big Endian). Size: 4 bytes. Also known as an unsigned integer, unsigned int, or uint. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u32be;
                    }
                }
            }

            Row {
                data-type-u64 := DataTypeButton {
                    text: @tr("u64");
                    icon: @image-url("./../images/data_types/purple_blocks_8.png");
                    tooltip-text: @tr("Data Type: u64. Size: 8 bytes. Also known as an unsigned long integer, unsigned long long, or ulong.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u64;
                    }
                }

                data-type-u64be := DataTypeButton {
                    text: @tr("u64 (BE)");
                    icon: @image-url("./../images/data_types/purple_blocks_8.png");
                    tooltip-text: @tr("Data Type: u64 (Big Endian). Size: 8 bytes. Also known as an unsigned long integer, unsigned long long, or ulong. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.u64be;
                    }
                }
            }

            Row {
                data-type-f32 := DataTypeButton {
                    text: @tr("f32");
                    icon: @image-url("./../images/data_types/orange_blocks_4.png");
                    tooltip-text: @tr("Data Type: f32. Size: 4 bytes. Also known as a Single-precision floating point.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.f32;
                    }
                }

                data-type-f32be := DataTypeButton {
                    text: @tr("f32 (BE)");
                    icon: @image-url("./../images/data_types/orange_blocks_4.png");
                    tooltip-text: @tr("Data Type: f32 (Big Endian). Size: 4 bytes. Also known as a Single-precision floating point. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.f32be;
                    }
                }
            }

            Row {
                data-type-f64 := DataTypeButton {
                    text: @tr("f64");
                    icon: @image-url("./../images/data_types/orange_blocks_8.png");
                    tooltip-text: @tr("Data Type: f64. Size: 8 bytes. Also known as a Double-precision floating point.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.f64;
                    }
                }

                data-type-f64be := DataTypeButton {
                    text: @tr("f64 (BE)");
                    icon: @image-url("./../images/data_types/orange_blocks_8.png");
                    tooltip-text: @tr("Data Type: f64 (Big Endian). Size: 8 bytes. Also known as a Double-precision floating point. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.f64be;
                    }
                }
            }

            Row {
                data-type-bytes := DataTypeButton {
                    // TODO: These should be purple
                    icon: @image-url("./../images/data_types/blue_blocks_array.png");
                    text: @tr("u8 [ ]");
                    tooltip-text: @tr("Data Type: u8[]. Size depends on the number of bytes provided. Also known as a byte[] or array of bytes. Represents a contiguous array of bytes.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.aob;
                    }
                }

                data-type-string := DataTypeButton {
                    // TODO: Find your own damn icon
                    icon: @image-url("./../images/projects/static_type.png");
                    text: @tr("String");
                    tooltip-text: @tr("Data Type: String. Size depends on the encoding and length of text. Represents any text.");
                    clicked => {
                        ManualScanViewModelBindings.active_data_type = DataTypeView.str;
                    }
                }
            }
        }
    }
}
