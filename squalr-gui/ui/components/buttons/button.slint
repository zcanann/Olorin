import { Theme } from "../../theme.slint";

import { FocusTouchArea } from "../focus_touch_area.slint";
import { StateLayer } from "../state_layer.slint";
import { Tooltip } from "../tooltips/tooltip.slint";
import { WindowViewModelBindings } from "../../view_model_bindings.slint";

export component Button {
    in property <bool> enabled: true;
    in property <length> border_radius: 4px;
    in property <length> border_bottom_left_radius: 0px;
    in property <length> border_bottom_right_radius: 0px;
    in property <length> border_top_left_radius: 0px;
    in property <length> border_top_right_radius: 0px;
    in property <length> border_width: 0px;
    in property <brush> hover_color: Theme.hover_tint;
    in property <brush> pressed_color: Theme.pressed_tint;
    in property <brush> border_color: Theme.background_control_primary_dark;
    in property <brush> border_color_focused: Theme.background_control_primary_dark;
    in property <string> tooltip_text;
    in property <MouseCursor> mouse_cursor: pointer;
    in property <string> click_sound: "click_1.mp3";
    out property <bool> has_hover: touch_area.has_hover;
    out property <bool> is_pressed: touch_area.is_pressed;
    callback clicked(PointerEvent, length, length);
    callback moved();
    callback mouse_entered();
    callback mouse_exited();
    forward_focus: touch_area;
    touch_area := FocusTouchArea {
        enabled <=> root.enabled;
        mouse_cursor: root.mouse_cursor;
        width: 100%;
        height: 100%;
        clicked(event, x, y) => {
            if (root.enabled) {
                WindowViewModelBindings.play_sound(click_sound);
                root.clicked(event, x,y);
            }
        }
        moved => {
            if (root.enabled) {
                root.moved();
            }
        }
        mouse_entered() => {
            if (root.enabled) {
                root.mouse_entered();
                if tooltip_text != "" {
                    // tooltip.show();
                }
            }
        }
        mouse_exited() => {
            if (root.enabled) {
                root.mouse_exited();
                // tooltip.close();
            }
        }
    }

    state_layer := StateLayer {
        enabled <=> root.enabled;
        border_width <=> root.border_width;
        border_radius <=> root.border_radius;
        border_bottom_left_radius <=> root.border_bottom_left_radius;
        border_bottom_right_radius <=> root.border_bottom_right_radius;
        border_top_left_radius <=> root.border_top_left_radius;
        border_top_right_radius <=> root.border_top_right_radius;
        hover_color <=> root.hover_color;
        pressed_color <=> root.pressed_color;
        border_color <=> root.border_color;
        border_color_focused <=> root.border_color_focused;
        width: 100%;
        height: 100%;
        pressed: touch_area.is_pressed || touch_area.enter_pressed;
        has_focus: touch_area.has_focus;
        has_hover: touch_area.has_hover;
    }

    @children
    tooltip := Tooltip {
        x: root.x;
        y: root.y + root.height;
        text: root.tooltip_text;
    }
}
