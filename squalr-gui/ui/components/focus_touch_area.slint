export component FocusTouchArea {
    in property <bool> enabled: true;
    in property <MouseCursor> mouse_cursor <=> touch_area.mouse_cursor;
    out property <bool> has_focus <=> focus_scope.has_focus;
    out property <bool> is_pressed <=> touch_area.pressed;
    out property <bool> has_hover <=> touch_area.has_hover;
    out property <bool> enter_pressed;
    out property <bool> has_hover_exited: false;
    callback clicked(PointerEvent, length, length);
    callback right_clicked(PointerEvent, length, length);
    callback moved();
    callback mouse_entered();
    callback mouse_exited();
    forward_focus: focus_scope;
    focus_scope := FocusScope {
        x: 0;
        width: 0px;
        enabled: root.enabled;
        key_pressed(event) => {
            if !root.enabled {
                return reject;
            }
            if (event.text == " " || event.text == "\n") && !root.enter_pressed {
                root.enter_pressed = true;
                touch_area.clicked();
                return accept;
            }
            return reject;
        }
        key_released(event) => {
            if !root.enabled {
                return reject;
            }
            if (event.text == " " || event.text == "\n") && root.enter_pressed {
                root.enter_pressed = false;
                return accept;
            }
            return reject;
        }
    }

    touch_area := TouchArea {
        enabled: root.enabled;
        width: 100%;
        height: 100%;
        changed has_hover => {
            if (has_hover) {
                root.mouse_entered();
            } else {
                root.mouse_exited();
            }
        }
        pointer_event(event) => {
            if root.enabled && event.kind == PointerEventKind.down {
                if (event.button == PointerEventButton.right) {
                    root.right_clicked(event, touch_area.mouse_x, touch_area.mouse_y)
                } else {
                    root.clicked(event, touch_area.mouse_x, touch_area.mouse_y);
                }
            }
        }
        moved => {
            if root.enabled {
                root.moved();
            }
        }
    }
}
