import { Theme } from "../../theme.slint";

import { ContextMenu } from "../context_menu/context_menu.slint";
import { Button } from "../buttons/button.slint";
import { TextFakeCheckbox } from "../checkboxes/text_fake_checkbox.slint";
import { HSeparator } from "../separator.slint";

export enum ToolbarMenuCheckState {
    none,
    checked,
    unchecked,
}

export struct ToolbarMenuItemData {
    id: string,
    text: string,
    has_separator: bool,
    check_state: ToolbarMenuCheckState,
}

export component ToolbarMenuItem inherits HorizontalLayout {
    in property <string> text;
    in property <length> parent_toolbar_size;
    in_out property <[ToolbarMenuItemData]> items;
    callback onItemClicked(string);
    text_button := Button {
        clicked => {
            context_menu.show();
        }
        HorizontalLayout {
            padding_left: 8px;
            padding_right: 8px;
            Text {
                horizontal_alignment: center;
                vertical_alignment: center;
                text: root.text;
                color: Theme.foreground;
            }
        }
    }

    context_menu := ContextMenu {
        x: text_button.x;
        y: text_button.y + text_button.height;
        content := VerticalLayout {
            padding: 0px;
            spacing: 0px;
            for item in items: VerticalLayout {
                padding: 0px;
                padding_top: item.has_separator ? 4px : 0px;
                spacing: item.has_separator ? 4px : 0px;
                HSeparator {
                    is_collapsed: !item.has_separator;
                }

                Button {
                    height: 24px;
                    clicked => {
                        root.onItemClicked(item.id);
                    }
                    HorizontalLayout {
                        alignment: start;
                        padding_left: 8px;
                        padding_right: 8px;
                        VerticalLayout {
                            alignment: center;
                            if(item.check_state == ToolbarMenuCheckState.none): Text {
                                horizontal_alignment: center;
                                vertical_alignment: center;
                                text: item.text;
                                color: Theme.foreground;
                            }
                        }

                        VerticalLayout {
                            alignment: center;
                            if(item.check_state != ToolbarMenuCheckState.none): TextFakeCheckbox {
                                text: item.text;
                                is_checked: item.check_state == ToolbarMenuCheckState.checked;
                            }
                        }
                    }
                }
            }
        }
    }
}
