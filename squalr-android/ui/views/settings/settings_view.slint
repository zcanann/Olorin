import { HorizontalBox, VerticalBox } from "std-widgets.slint";

import { Theme } from "../../theme.slint";

import { ScanSettingsViewModelBindings, MemorySettingsViewModelBindings } from "../../view_model_bindings.slint";

import { GroupBox } from "../../components/groupbox.slint";
import { Button } from "../../components/buttons/button.slint";
import { TextField } from "../../components/input/text_field.slint";
import { Checkbox } from "../../components/checkboxes/checkbox.slint";
import { TextCheckbox } from "../../components/checkboxes/text_checkbox.slint";
import { BevelButton } from "../../components/buttons/bevel_button.slint";

export component SettingsView inherits Rectangle {
    property <int> selected-tab: 1;
    content := VerticalBox {
        padding: 0px;
        spacing: 0px;
        Rectangle {
            height: 24px;
            padding-bottom: 4px;
            header := HorizontalBox {
                alignment: start;
                padding: 0px;
                spacing: 0px;
                general-tab := BevelButton {
                    width: 96px;
                    height: 24px;
                    border-color: Theme.submenu-border;
                    border-width: 1px;
                    border-radius: 0px;
                    border-top-left-radius: 8px;
                    border-top-right-radius: 8px;
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                    clicked => {
                        root.selected-tab = 0;
                    }
                    Text {
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        text: @tr("General");
                        color: Theme.foreground;
                    }
                }

                memory-tab := BevelButton {
                    width: 96px;
                    height: 24px;
                    border-color: Theme.submenu-border;
                    border-width: 1px;
                    border-radius: 0px;
                    border-top-left-radius: 8px;
                    border-top-right-radius: 8px;
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                    clicked => {
                        root.selected-tab = 1;
                    }
                    Text {
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        text: @tr("Memory");
                        color: Theme.foreground;
                    }
                }

                scans-tab := BevelButton {
                    width: 96px;
                    height: 24px;
                    border-color: Theme.submenu-border;
                    border-width: 1px;
                    border-radius: 0px;
                    border-top-left-radius: 8px;
                    border-top-right-radius: 8px;
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                    clicked => {
                        root.selected-tab = 2;
                    }
                    Text {
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        text: @tr("Scan");
                        color: Theme.foreground;
                    }
                }

                middleware-tab := BevelButton {
                    width: 96px;
                    height: 24px;
                    border-color: Theme.submenu-border;
                    border-width: 1px;
                    border-radius: 0px;
                    border-top-left-radius: 8px;
                    border-top-right-radius: 8px;
                    border-bottom-left-radius: 0px;
                    border-bottom-right-radius: 0px;
                    clicked => {
                        root.selected-tab = 3;
                    }
                    Text {
                        horizontal-alignment: left;
                        vertical-alignment: center;
                        text: @tr("Middleware");
                        color: Theme.foreground;
                    }
                }

                states [
                    _ when root.selected-tab >= 0: {
                        general-tab.background-color: root.selected-tab == 0 ? Theme.background-control-primary : Theme.background-control-secondary;
                        memory-tab.background-color: root.selected-tab == 1 ? Theme.background-control-primary : Theme.background-control-secondary;
                        scans-tab.background-color: root.selected-tab == 2 ? Theme.background-control-primary : Theme.background-control-secondary;
                        middleware-tab.background-color: root.selected-tab == 3 ? Theme.background-control-primary : Theme.background-control-secondary;
                    }
                ]
            }
        }

        Rectangle {
            general-content := VerticalBox { }

            memory-content := GridLayout {
                padding: 8px;
                spacing: 8px;
                Row {
                    GroupBox {
                        header-text: "Required Protection Flags";
                        VerticalBox {
                            alignment: start;
                            padding: 0px;
                            spacing: 6px;
                            TextCheckbox {
                                text: @tr("Write");
                                is-checked <=> MemorySettingsViewModelBindings.required_write;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.required_write_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Execute");
                                is-checked <=> MemorySettingsViewModelBindings.required_execute;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.required_execute_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Copy on Write");
                                is-checked <=> MemorySettingsViewModelBindings.required_copy_on_write;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.required_copy_on_write_changed(value);
                                }
                            }
                        }
                    }

                    GroupBox {
                        header-text: "Excluded Protection Flags";
                        VerticalBox {
                            alignment: start;
                            padding: 0px;
                            spacing: 6px;
                            TextCheckbox {
                                text: @tr("Write");
                                is-checked <=> MemorySettingsViewModelBindings.excluded_write;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.excluded_write_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Execute");
                                is-checked <=> MemorySettingsViewModelBindings.excluded_execute;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.excluded_execute_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Copy on Write");
                                is-checked <=> MemorySettingsViewModelBindings.excluded_copy_on_write;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.excluded_copy_on_write_changed(value);
                                }
                            }
                        }
                    }
                }

                Row {
                    GroupBox {
                        header-text: "Memory Types";
                        VerticalBox {
                            alignment: start;
                            padding: 0px;
                            spacing: 6px;
                            TextCheckbox {
                                text: @tr("None");
                                is-checked <=> MemorySettingsViewModelBindings.memory_type_none;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.memory_type_none_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Image");
                                is-checked <=> MemorySettingsViewModelBindings.memory_type_image;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.memory_type_image_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Private");
                                is-checked <=> MemorySettingsViewModelBindings.memory_type_private;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.memory_type_private_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Mapped");
                                is-checked <=> MemorySettingsViewModelBindings.memory_type_mapped;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.memory_type_mapped_changed(value);
                                }
                            }
                        }
                    }

                    GroupBox {
                        header-text: "Virtual Memory Querying";
                        VerticalBox {
                            alignment: start;
                            padding: 0px;
                            spacing: 6px;
                            TextCheckbox {
                                text: @tr("Query All Memory");
                                is-checked <=> MemorySettingsViewModelBindings.only_query_usermode;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.only_query_usermode_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Query All Usermode Memory");
                                is-checked <=> MemorySettingsViewModelBindings.only_query_usermode;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.only_query_usermode_changed(value);
                                }
                            }

                            TextCheckbox {
                                text: @tr("Query Custom Range");
                                is-checked <=> MemorySettingsViewModelBindings.only_query_usermode;
                                check-changed(value) => {
                                    MemorySettingsViewModelBindings.only_query_usermode_changed(value);
                                }
                            }
                        }
                    }
                }
            }

            scans-content := VerticalBox {
                GridLayout {
                    spacing: 4px;
                    Row {
                        HorizontalBox {
                            TextField {
                                default-text: "50";
                            }

                            Text {
                                text: @tr("Freeze Interval");
                                color: Theme.foreground;
                            }
                        }
                    }

                    Row {
                        HorizontalBox {
                            TextField {
                                default-text: "100";
                            }

                            Text {
                                text: @tr("Project Read Interval");
                                color: Theme.foreground;
                            }
                        }
                    }

                    Row {
                        HorizontalBox {
                            TextField {
                                default-text: "100";
                            }

                            Text {
                                text: @tr("Result Read Interval");
                                color: Theme.foreground;
                            }
                        }
                    }
                }
            }

            middleware-content := VerticalBox { }
        }

        states [
            _ when root.selected-tab >= 0: {
                general-content.visible: root.selected-tab == 0;
                memory-content.visible: root.selected-tab == 1;
                scans-content.visible: root.selected-tab == 2;
                middleware-content.visible: root.selected-tab == 3;
            }
        ]
    }
}
