import { Theme } from "../../theme.slint";

import { Button } from "../../components/buttons/button.slint";
import { ContextMenu } from "../context_menu/context_menu.slint";
import { FocusTouchArea } from "../focus_touch_area.slint";
import { StateLayer } from "../state_layer.slint";
import { FakeCheckbox } from "../checkboxes/fake_checkbox.slint";
import { DisplayValueTypeConverter } from "../../converters/display_value_type_converter.slint";
import { IconConverter } from "../../converters/icon_converter.slint";
import { DataValueViewData, DisplayValueViewData, DisplayValuesViewData, DisplayValueTypeView, ConversionsViewModelBindings, ValidationViewModelBindings } from "../../view_model_bindings.slint";

export component DataValueBox {
    in_out property <DataValueViewData> data_value;
    in property <bool> is_read_only;
    in property <string> preview_text;
    in property <length> text_padding_top: 4px;
    in property <length> text_padding_bottom: 4px;
    in property <length> text_padding_left: 8px;
    in property <length> text_padding_right: 8px;
    in property <TextHorizontalAlignment> text_horizontal_alignment: left;
    in property <TextVerticalAlignment> text_vertical_alignment: center;
    in property <color> background: Theme.background_primary;
    in property <color> foreground: Theme.foreground;
    in property <color> foreground_binary: Theme.bin_blue;
    in property <color> foreground_hexadecimal: Theme.hex_green;
    in property <color> foreground_preview: Theme.foreground_preview;
    in property <color> border_color: Theme.submenu_border;
    in property <color> invalid_color: Theme.error_red;
    in property <color> read_only_color: Theme.foreground_preview;
    property <[DisplayValueTypeView]> supported_display_types: ValidationViewModelBindings.get_supported_display_types_for_data_type(root.data_value.data_type_ref);
    icon_converter := IconConverter { }

    display_value_type_converter := DisplayValueTypeConverter { }

    callback on_value_committed(new_value: string);
    public pure function get_value_text() -> string {
        return text_input.text;
    }
    public pure function is_value_valid() -> bool {
        return ValidationViewModelBindings.validate_data_value(text_input.text, data_value.data_type_ref, root.get_active_display_value());
    }
    pure function get_active_display_value() -> DisplayValueViewData {
        return root.data_value.display_values.display_values[root.data_value.display_values.active_display_value_index];
    }
    pure function get_active_display_value_type() -> DisplayValueTypeView {
        return root.get_active_display_value().display_value_type;
    }
    public pure function get_display_value_color() -> color {
        if root.is_read_only {
            return root.read_only_color;
        } else if !root.is_value_valid_for_cursor() {
            return root.invalid_color;
        } else if root.get_active_display_value_type() == DisplayValueTypeView.hexadecimal {
            return root.foreground_hexadecimal;
        } else if root.get_active_display_value_type() == DisplayValueTypeView.binary {
            return root.foreground_binary;
        } else {
            return root.foreground;
        }
    }
    public pure function is_value_valid_for_cursor() -> bool {
        // Empty string is OK, we dont want the cursor to go red for empty text.
        return text_input.text == "" || root.is_value_valid();
    }
    forward_focus: touch_area;
    touch_area := FocusTouchArea {
        width: 100%;
        height: 100%;
        clicked => {
            text_input.focus();
        }
    }

    state_layer := StateLayer {
        width: 100%;
        height: 100%;
        pressed: touch_area.is_pressed || touch_area.enter_pressed;
        has_focus: touch_area.has_focus;
        has_hover: touch_area.has_hover;
    }

    input_border := Rectangle {
        background: root.background;
        border_color: root.border_color;
        border_radius: 2px;
        border_width: 1px;
        content_layer := HorizontalLayout {
            padding_top: root.text_padding_top;
            padding_bottom: root.text_padding_bottom;
            padding_left: root.text_padding_left;
            padding_right: root.text_padding_right;
            alignment: start;
            text_input := TextInput {
                text: root.get_active_display_value().display_string;
                enabled: !root.is_read_only;
                horizontal_alignment: root.text_horizontal_alignment;
                vertical_alignment: root.text_vertical_alignment;
                color: root.get_display_value_color();
                single_line: true;
            }
        }

        HorizontalLayout {
            alignment: end;
            VerticalLayout {
                alignment: center;
                commit_button := Button {
                    height: 24px;
                    width: 24px;
                    tooltip_text: @tr("Commit changes...");
                    click_sound: "";
                    clicked => {
                        root.on_value_committed(text_input.text);
                    }
                    Image {
                        width: 16px;
                        height: 16px;
                        horizontal_alignment: center;
                        vertical_alignment: center;
                        source: @image_url("../../images/app/check_mark.png");
                    }
                }
            }

            VerticalLayout {
                alignment: center;
                base_systems_button := Button {
                    height: 24px;
                    width: 24px;
                    tooltip_text: @tr("Change base system...");
                    click_sound: "";
                    clicked => {
                        context_menu.show();
                    }
                    Image {
                        width: 16px;
                        height: 16px;
                        horizontal_alignment: center;
                        vertical_alignment: center;
                        source: @image_url("../../images/navigation/down_arrow_small.png");
                    }
                }
            }
        }

        HorizontalLayout {
            alignment: end;
            padding_right: 24px;
            Rectangle {
                background: Theme.submenu_border;
                width: 1px;
            }
        }
    }
            
    // Optional preview text to prompt the user with an input hint.
    preview_layer := HorizontalLayout {
        padding_top: root.text_padding_top;
        padding_bottom: root.text_padding_bottom;
        padding_left: root.text_padding_left;
        padding_right: root.text_padding_right;
        preview_text_display := Text {
            text: text_input.text == "" ? root.preview_text : "";
            horizontal_alignment: root.text_horizontal_alignment;
            vertical_alignment: root.text_vertical_alignment;
            color: root.foreground_preview;
        }
    }

    context_menu := ContextMenu {
        x: text_input.x;
        y: text_input.y + input_border.height;
        width: root.width;
        height: root.height;
        close_policy: PopupClosePolicy.close_on_click_outside;
        VerticalLayout {
            padding: 0px;
            spacing: 0px;
            for display_value_index in root.data_value.display_values.display_values.length: Button {
                clicked => {
                    root.data_value.display_values.active_display_value_index = display_value_index;
                    context_menu.close();
                }
                HorizontalLayout {
                    alignment: start;
                    padding: 8px;
                    spacing: 4px;
                    FakeCheckbox {
                        is_checked: root.data_value.display_values.active_display_value_index == display_value_index;
                    }

                    Text {
                        horizontal_alignment: center;
                        vertical_alignment: center;
                        text: "Display as " + display_value_type_converter.display_value_type_to_string(root.data_value.display_values.display_values[display_value_index].display_value_type);
                        color: Theme.foreground;
                    }
                }
            }
        }
    }
}
