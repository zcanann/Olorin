import { Theme } from "../../theme.slint";

import { StructViewerViewModelBindings, ValuedStructFieldViewData } from "../../view_model_bindings.slint";
import { DataValueBox } from "../../components/data_value_box/data_value_box.slint";
import { IconConverter } from "../../converters/icon_converter.slint";

export component StructEntryView inherits Rectangle {
    in property <ValuedStructFieldViewData> struct_entry;
    in property <length> splitter_location;
    border_width: 1px;
    border_color: Theme.submenu_border;
    height: 24px;
    icon_converter := IconConverter { }

    Text {
        x: 8px;
        horizontal_alignment: left;
        color: Theme.foreground;
        text: root.struct_entry.name;
    }

    entry := HorizontalLayout {
        x: root.splitter_location + 8px;
        padding: 0px;
        spacing: 8px;
        VerticalLayout {
            alignment: center;
            icon := Image {
                width: 16px;
                height: 16px;
                horizontal_alignment: center;
                vertical_alignment: center;
                source: icon_converter.icon_view_to_image(icon_converter.icon_id_to_view(struct_entry.icon_id));
            }
        }

        VerticalLayout {
            alignment: center;
            DataValueBox {
                data_value: root.struct_entry.data_value;
                width: root.width - entry.x - icon.width - entry.spacing;
                is_read_only: root.struct_entry.is_read_only;
                on_value_committed(new_value) => {
                    StructViewerViewModelBindings.commit_field_change(root.struct_entry.namespaced_name, new_value, root.struct_entry.display_values.display_values[root.struct_entry.display_values.active_display_value_index],  root.struct_entry.data_value.data_type_ref)
                }
            }
        }
    }
}
