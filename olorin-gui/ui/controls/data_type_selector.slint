import { Theme } from "../theme.slint";

import { ContextMenu } from "../components/context_menu/context_menu.slint";
import { Button } from "../components/buttons/button.slint";
import { DataTypeButton } from "data_type_button.slint";
import { ElementScannerViewModelBindings, ValidationViewModelBindings, IconView } from "../view_model_bindings.slint";
import { IconConverter } from "../converters/icon_converter.slint";

export component DataTypeSelector inherits Rectangle {
    background: Theme.background_control;
    border_color: Theme.submenu_border;
    border_width: 1px;
    width: 84px;
    pure function to_display_string(data_type_id: string) -> string {
        if data_type_id == "bit_field" {
            return "bits";
        }
        return data_type_id;
    }
    icon_converter := IconConverter { }

    data_type_button := Button {
        width: 100%;
        height: 100%;
        tooltip_text: @tr("Select a data type...");
        click_sound: "";
        clicked => {
            data_types_context_menu.show();
        }
        HorizontalLayout {
            padding_top: 0px;
            padding_bottom: 0px;
            padding_left: 8px;
            padding_right: 0px;
            spacing: 4px;
            alignment: start;
            VerticalLayout {
                alignment: center;
                Image {
                    width: 16px;
                    height: 16px;
                    horizontal_alignment: left;
                    vertical_alignment: center;
                    source: icon_converter.icon_view_to_image(icon_converter.icon_id_to_view(ElementScannerViewModelBindings.active_icon_id));
                }
            }

            VerticalLayout {
                alignment: center;
                Text {
                    text: root.to_display_string(ElementScannerViewModelBindings.active_icon_id);
                    color: Theme.foreground;
                    horizontal_alignment: left;
                    vertical_alignment: center;
                }
            }
        }
    }

    data_types_context_menu := ContextMenu {
        x: data_type_button.x;
        y: data_type_button.y + data_type_button.height;
        width: 192px;
        built_in_data_types_grid := GridLayout {
            padding: 0px;
            spacing: 0px;
            Row {
                data_type_u8 := DataTypeButton {
                    text: @tr("u8");
                    icon: IconView.u8;
                    tooltip_text: @tr("Data Type: u8. Size: 1 byte. Also known as an unsigned byte, or byte.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u8";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_i8 := DataTypeButton {
                    text: @tr("i8");
                    icon: IconView.i8;
                    tooltip_text: @tr("Data Type: i8. Size: 1 byte. Also known as a signed byte, or sbyte.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i8";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_i16 := DataTypeButton {
                    text: @tr("i16");
                    icon: IconView.i16;
                    tooltip_text: @tr("Data Type: i16. Size: 2 bytes. Also known as a (signed) short integer, or short.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i16";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_i16be := DataTypeButton {
                    text: @tr("i16 (BE)");
                    icon: IconView.i16be;
                    tooltip_text: @tr("Data Type: i16 (Big Endian). Size: 2 bytes. Also known as a (signed) short integer, or short. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i16be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_i32 := DataTypeButton {
                    text: @tr("i32");
                    icon: IconView.i32;
                    tooltip_text: @tr("Data Type: i32. Size: 4 bytes. Also known as a (signed) integer, or int.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i32";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_i32be := DataTypeButton {
                    text: @tr("i32 (BE)");
                    icon: IconView.i32be;
                    tooltip_text: @tr("Data Type: i32 (Big Endian). Size: 4 bytes. Also known as a (signed) integer, or int. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i32be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_i64 := DataTypeButton {
                    text: @tr("i64");
                    icon: IconView.i64;
                    tooltip_text: @tr("Data Type: i64. Size: 8 bytes. Also known as a (signed) long integer, long long, or long.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i64";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_i64be := DataTypeButton {
                    text: @tr("i64 (BE)");
                    icon: IconView.i64be;
                    tooltip_text: @tr("Data Type: i64 (Big Endian). Size: 8 bytes. Also known as a (signed) long integer, long long, or long. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "i64be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_u16 := DataTypeButton {
                    text: @tr("u16");
                    icon: IconView.u16;
                    tooltip_text: @tr("Data Type: u16. Size: 2 bytes. Also known as an unsigned short integer, unsigned short, or ushort.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u16";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_u16be := DataTypeButton {
                    text: @tr("u16 (BE)");
                    icon: IconView.u16be;
                    tooltip_text: @tr("Data Type: u16 (Big Endian). Size: 2 bytes. Also known as an unsigned short integer, unsigned short, or ushort. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u16be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_u32 := DataTypeButton {
                    text: @tr("u32");
                    icon: IconView.u32;
                    tooltip_text: @tr("Data Type: u32. Size: 4 bytes. Also known as an unsigned integer, unsigned int, or uint.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u32";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_u32be := DataTypeButton {
                    text: @tr("u32 (BE)");
                    icon: IconView.u32be;
                    tooltip_text: @tr("Data Type: u32 (Big Endian). Size: 4 bytes. Also known as an unsigned integer, unsigned int, or uint. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u32be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_u64 := DataTypeButton {
                    text: @tr("u64");
                    icon: IconView.u64;
                    tooltip_text: @tr("Data Type: u64. Size: 8 bytes. Also known as an unsigned long integer, unsigned long long, or ulong.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u64";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_u64be := DataTypeButton {
                    text: @tr("u64 (BE)");
                    icon: IconView.u64be;
                    tooltip_text: @tr("Data Type: u64 (Big Endian). Size: 8 bytes. Also known as an unsigned long integer, unsigned long long, or ulong. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "u64be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_f32 := DataTypeButton {
                    text: @tr("f32");
                    icon: IconView.f32;
                    tooltip_text: @tr("Data Type: f32. Size: 4 bytes. Also known as a Single_precision floating point.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "f32";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_f32be := DataTypeButton {
                    text: @tr("f32 (BE)");
                    icon: IconView.f32be;
                    tooltip_text: @tr("Data Type: f32 (Big Endian). Size: 4 bytes. Also known as a Single_precision floating point. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "f32be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_f64 := DataTypeButton {
                    text: @tr("f64");
                    icon: IconView.f64;
                    tooltip_text: @tr("Data Type: f64. Size: 8 bytes. Also known as a Double_precision floating point.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "f64";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_f64be := DataTypeButton {
                    text: @tr("f64 (BE)");
                    icon: IconView.f64be;
                    tooltip_text: @tr("Data Type: f64 (Big Endian). Size: 8 bytes. Also known as a Double_precision floating point. Big Endian is generally only used in certain console emulators.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "f64be";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }

            Row {
                data_type_string_button := DataTypeButton {
                    text: @tr("String...");
                    icon: IconView.string;
                    tooltip_text: @tr("Select a string data type...");
                    clicked => {
                        data_types_context_menu.close();
                        strings_context_menu.show();
                    }
                }

                data_type_custom := DataTypeButton {
                    text: @tr("Custom");
                    icon: IconView.bytes;
                    tooltip_text: @tr("Custom data types created by plugins.");
                    clicked => {
                        data_types_context_menu.close();
                        custom_types_context_menu.show();
                    }
                }
            }
        }
    }

    strings_context_menu := ContextMenu {
        x: data_type_button.x;
        y: data_type_button.y + data_type_button.height;
        width: 192px;
        string_types_grid := GridLayout {
            padding: 0px;
            spacing: 0px;
            Row {
                data_type_string_utf8 := DataTypeButton {
                    text: @tr("utf8");
                    icon: IconView.string;
                    tooltip_text: @tr("Data Type: string_utf8.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "string_utf8";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }

                data_type_string_ascii := DataTypeButton {
                    text: @tr("ascii");
                    icon: IconView.string;
                    tooltip_text: @tr("Data Type: string_ascii.");
                    clicked => {
                        ElementScannerViewModelBindings.active_data_value.data_type_ref.data_type_id = "string_ascii";
                        ElementScannerViewModelBindings.active_icon_id = icon_converter.icon_view_to_id(self.icon);
                        ElementScannerViewModelBindings.active_data_value.display_values.active_display_value_index = ValidationViewModelBindings.get_default_display_type_index_for_data_type(ElementScannerViewModelBindings.active_data_value.data_type_ref);
                    }
                }
            }
        }
    }

    custom_types_context_menu := ContextMenu {
        x: data_type_button.x;
        y: data_type_button.y + data_type_button.height;
        width: 192px;
        custom_types_grid := GridLayout {
            padding: 0px;
            spacing: 0px;
        }
    }
}
