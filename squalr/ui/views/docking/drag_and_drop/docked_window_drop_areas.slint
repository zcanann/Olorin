import { VerticalBox } from "std-widgets.slint";

import { Theme } from "../../../theme.slint";

import { DockRootViewModelBindings, DockedWindowViewData, RedockTarget } from "../../../view_model_bindings.slint";

export component DockedWindowDropAreas inherits Rectangle {
    in-out property <DockedWindowViewData> docked-window-data;
    in property <length> resize-padding;
    in property <length> footer-padding;
    property <percent> edge-drop-fill-ratio: 25%;
    x: resize-padding;
    y: resize-padding;
    width: root.docked-window-data.width - resize-padding * 2;
    height: root.docked-window-data.height - resize-padding * 2 - footer-padding;
    // Left split drop area
    Rectangle {
        x: 0;
        y: root.height * edge-drop-fill-ratio;
        width: root.width * edge-drop-fill-ratio;
        height: root.height - root.height * edge-drop-fill-ratio * 2;
        border-width: 2px;
        left-touch-area := TouchArea {
            mouse-cursor: MouseCursor.grabbing;
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active-dragged-window-id != "") {
                    DockRootViewModelBindings.is-dragging-window = false;
                    DockRootViewModelBindings.try-redock-window(DockRootViewModelBindings.active-dragged-window-id, root.docked-window-data.identifier, RedockTarget.left);
                    DockRootViewModelBindings.active-dragged-window-id = "";
                }
            }
        }

        states [
            _ when !left-touch-area.has-hover: {
                background: Theme.selected-background;
                border-color: Theme.selected-border;
            }
            _ when left-touch-area.has-hover: {
                background: Theme.selected-background.darker(0.3);
                border-color: Theme.selected-border;
            }
        ]
    }
    // Right split drop area
    Rectangle {
        x: root.width - root.width * edge-drop-fill-ratio;
        y: root.height * edge-drop-fill-ratio;
        width: root.width * edge-drop-fill-ratio;
        height: root.height - root.height * edge-drop-fill-ratio * 2;
        border-width: 2px;
        right-touch-area := TouchArea {
            mouse-cursor: MouseCursor.grabbing;
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active-dragged-window-id != "") {
                    DockRootViewModelBindings.is-dragging-window = false;
                    DockRootViewModelBindings.try-redock-window(DockRootViewModelBindings.active-dragged-window-id, root.docked-window-data.identifier, RedockTarget.right);
                    DockRootViewModelBindings.active-dragged-window-id = "";
                }
            }
        }

        states [
            _ when !right-touch-area.has-hover: {
                background: Theme.selected-background;
                border-color: Theme.selected-border;
            }
            _ when right-touch-area.has-hover: {
                background: Theme.selected-background.darker(0.3);
                border-color: Theme.selected-border;
            }
        ]
    }
    // Top split drop area
    Rectangle {
        x: root.width * edge-drop-fill-ratio;
        y: 0;
        width: root.width - root.width * edge-drop-fill-ratio * 2;
        height: root.height * edge-drop-fill-ratio;
        border-width: 2px;
        top-touch-area := TouchArea {
            mouse-cursor: MouseCursor.grabbing;
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active-dragged-window-id != "") {
                    DockRootViewModelBindings.is-dragging-window = false;
                    DockRootViewModelBindings.try-redock-window(DockRootViewModelBindings.active-dragged-window-id, root.docked-window-data.identifier, RedockTarget.up);
                    DockRootViewModelBindings.active-dragged-window-id = "";
                }
            }
        }

        states [
            _ when !top-touch-area.has-hover: {
                background: Theme.selected-background;
                border-color: Theme.selected-border;
            }
            _ when top-touch-area.has-hover: {
                background: Theme.selected-background.darker(0.3);
                border-color: Theme.selected-border;
            }
        ]
    }
    // Bottom split drop area
    Rectangle {
        x: root.width * edge-drop-fill-ratio;
        y: root.height - root.height * edge-drop-fill-ratio;
        width: root.width - root.width * edge-drop-fill-ratio * 2;
        height: root.height * edge-drop-fill-ratio;
        border-width: 2px;
        bottom-touch-area := TouchArea {
            mouse-cursor: MouseCursor.grabbing;
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active-dragged-window-id != "") {
                    DockRootViewModelBindings.is-dragging-window = false;
                    DockRootViewModelBindings.try-redock-window(DockRootViewModelBindings.active-dragged-window-id, root.docked-window-data.identifier, RedockTarget.down);
                    DockRootViewModelBindings.active-dragged-window-id = "";
                }
            }
        }

        states [
            _ when !bottom-touch-area.has-hover: {
                background: Theme.selected-background;
                border-color: Theme.selected-border;
            }
            _ when bottom-touch-area.has-hover: {
                background: Theme.selected-background.darker(0.3);
                border-color: Theme.selected-border;
            }
        ]
    }
    // Center tab drop area
    Rectangle {
        x: root.width / 2 - root.width * edge-drop-fill-ratio;
        y: root.height / 2 - root.height * edge-drop-fill-ratio;
        width: root.width * edge-drop-fill-ratio * 2;
        height: root.height * edge-drop-fill-ratio * 2;
        border-width: 2px;
        center-touch-area := TouchArea {
            mouse-cursor: MouseCursor.grabbing;
            pointer-event(event) => {
                if (event.kind == PointerEventKind.up && DockRootViewModelBindings.active-dragged-window-id != "") {
                    DockRootViewModelBindings.is-dragging-window = false;
                    DockRootViewModelBindings.try-redock-window(DockRootViewModelBindings.active-dragged-window-id, root.docked-window-data.identifier, RedockTarget.center);
                    DockRootViewModelBindings.active-dragged-window-id = "";
                }
            }
        }

        states [
            _ when !center-touch-area.has-hover: {
                background: Theme.selected-background;
                border-color: Theme.selected-border;
            }
            _ when center-touch-area.has-hover: {
                background: Theme.selected-background.darker(0.3);
                border-color: Theme.selected-border;
            }
        ]
    }
}
