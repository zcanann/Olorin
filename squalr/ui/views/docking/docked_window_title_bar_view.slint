import { HorizontalBox, VerticalBox, Palette } from "std-widgets.slint";

import { Theme } from "../../theme.slint";

import { DockRootViewModelBindings, DockedWindowViewData } from "./../../view_model_bindings.slint";
import { Button } from "../../components/buttons/button.slint";

export component DockedWindowTitleBarView inherits Rectangle {
    in-out property <DockedWindowViewData> docked-window-data;
    background: Theme.background-primary;
    height: 24px;
    title-drag := TouchArea {
        moved => {
            if (self.pressed && self.enabled) {
                // TODO: This is how we would start the process for undocking, or re-docking a window.
                // DockRootViewModelBindings.drag((title-drag.mouse-x - title-drag.pressed-x) / 1px, (title-drag.mouse-y - title-drag.pressed-y) / 1px);
            }
        }
    }

    HorizontalLayout {
        padding: 0px;
        // Title
        VerticalLayout {
            alignment: center;
            padding-top: 0px;
            padding-bottom: 0px;
            padding-left: 8px;
            padding-right: 0px;
            title := Text {
                text: DockRootViewModelBindings.get-tab-text(docked-window-data.identifier);
                vertical-alignment: center;
                color: Theme.foreground;
            }
        }

        HorizontalBox {
            alignment: end;
            padding: 0px;
            spacing: 0px;
            close-button := Button {
                width: 36px;
                tooltip-text: @tr("Close");
                click-sound: "";
                clicked => {
                    DockRootViewModelBindings.hide(docked-window-data.identifier);
                }
                Image {
                    width: 16px;
                    height: 16px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    source: @image-url("../../images/app/close.png");
                }
            }
        }
    }
}
