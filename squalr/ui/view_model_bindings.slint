/// This file contains every binding between the UI (view) and Rust (view-model).
/// The MVVM pattern is really simple. You have:
/// - A view (.slint files)
/// - A model (squalr libraries)
/// - And a view-model (glue that connects the two)
/// The bindings below are how the view <=> view-model connect to one another.

export global WindowViewModelBindings {
    callback close();
    callback maximize();
    callback minimize();
    callback double-clicked();
    callback drag(int, int);
}

struct ProcessViewData {
    name: string,
    icon: image,
}

export global ProcessViewModelBindings {
    callback open-process(int);
    in property <[ProcessViewData]> processes;
}

export global OutputViewModelBindings {
    in-out property <string> output-text;
}

export global ScanViewModelBindings {
    callback new_scan();
    callback set_scan_constraint(int);
}

export global SettingsViewModelBindings { }

export global ProjectExplorerViewModelBindings { }

export global ScanResultsViewModelBindings { }

export global PointerScanResultsViewModelBindings { }

export global PropertyViewerViewModelBindings { }
