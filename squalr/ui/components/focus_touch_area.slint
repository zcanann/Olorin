export component FocusTouchArea {
    in property <bool> enabled: true;
    in property <MouseCursor> mouse-cursor <=> touch-area.mouse-cursor;
    out property <bool> has-focus <=> focus-scope.has-focus;
    out property <bool> is-pressed <=> touch-area.pressed;
    out property <bool> has-hover <=> touch-area.has-hover;
    out property <bool> enter-pressed;
    out property <bool> has-hover-exited: false;
    callback clicked(length, length);
    callback mouse-entered();
    callback mouse-exited();
    forward-focus: focus-scope;
    focus-scope := FocusScope {
        x: 0;
        width: 0px;
        enabled: root.enabled;
        key-pressed(event) => {
            if !root.enabled {
                return reject;
            }
            if (event.text == " " || event.text == "\n") && !root.enter-pressed {
                root.enter-pressed = true;
                touch-area.clicked();
                return accept;
            }
            return reject;
        }
        key-released(event) => {
            if !root.enabled {
                return reject;
            }
            if (event.text == " " || event.text == "\n") && root.enter-pressed {
                root.enter-pressed = false;
                return accept;
            }
            return reject;
        }
    }

    touch-area := TouchArea {
        enabled: root.enabled;
        width: 100%;
        height: 100%;
        changed has-hover => {
            if (has-hover) {
                root.mouse-entered();
            } else {
                root.mouse-exited();
            }
        }
        clicked => {
            if root.enabled {
                root.clicked(touch-area.mouse-x, touch-area.mouse-y);
            }
        }
    }
}
