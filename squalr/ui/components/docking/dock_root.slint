import { Theme } from "./../../theme.slint";

import { DockedWindowView } from "../../views/docking/docked_window_view.slint";
import { OutputView } from "../../views/output/output_view.slint";
import { PropertyViewerView } from "../../views/property_viewer/property_viewer_view.slint";
import { ProcessSelectorView } from "../../views/process_selector/process_selector_view.slint";
import { ProjectExplorerView } from "../../views/project_explorer/project_explorer_view.slint";
import { ScanResultsView } from "../../views/scan_results/scan_results_view.slint";
import { SettingsView } from "../../views/settings/settings_view.slint";
import { DockRootViewModelBindings } from "./../../view_model_bindings.slint";

export component DockRoot inherits Rectangle {
    // This binding only exists to force Slint to send the width and height to Rust.
    // This allows for Slint and Rust to reach an agreement as to what the available width and height for the dock space is.
    // The function just returns 0, so the x is not actually modified in this process.
    x: DockRootViewModelBindings.update-dock-root-size(root.width, root.height);
    background: Theme.background-primary;
    changed width => {
        // This is much less responsive than the hack solution for updating dock root size, so we'll stick with the hack above.
        // DockRootViewModelBindings.update-dock-root-width(root.width);
        update-dock-data();
    }
    changed height => {
        // This is much less responsive than the hack solution for updating dock root size, so we'll stick with the hack above.
        // DockRootViewModelBindings.update-dock-root-height(root.height)
        update-dock-data();
    }
    function update-dock-data() {
        settings-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("settings");
        scan-results-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("scan-results");
        output-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("output");
        process-selector-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("process-selector");
        property-viewer-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("property-viewer");
        project-explorer-panel.docked-window-data = DockRootViewModelBindings.get_docked_window_data("project-explorer");
    }

    // 'Settings' window
    settings-panel := DockedWindowView {
        SettingsView { }
    }

    // 'ScanResults' window
    scan-results-panel := DockedWindowView {
        ScanResultsView { }
    }

    // 'Output' window
    output-panel := DockedWindowView {
        OutputView { }
    }

    // 'ProcessSelector' window
    process-selector-panel := DockedWindowView {
        ProcessSelectorView { }
    }

    // 'PropertyViewer' window
    property-viewer-panel := DockedWindowView {
        PropertyViewerView { }
    }

    // 'ProjectExplorer' window
    project-explorer-panel := DockedWindowView {
        ProjectExplorerView { }
    }
}
