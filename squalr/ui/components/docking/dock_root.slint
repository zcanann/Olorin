import { Theme } from "./../../theme.slint";

import { DockedWindowLayoutNode } from "./docked_window_layout_node.slint";
import { DockedWindowHorizontalSplitter } from "./docked_window_horizontal_splitter.slint";
import { DockedWindowVerticalSplitter } from "./docked_window_vertical_splitter.slint";
import { DockedWindowView } from "../../views/docking/docked_window_view.slint";

export component DockRecurseEnd inherits Rectangle {
    in property <[DockedWindowLayoutNode]> layout;
    in property <string> child;
    for node in layout: Rectangle {
        if node.dock-window-id == root.child && node.children.length == 0: DockedWindowView {
            docked-window-id: node.dock-window-id;
        }
    }
}

export component DockRecurse3 inherits Rectangle {
    in property <[DockedWindowLayoutNode]> layout;
    in property <string> child;
    for node in layout: Rectangle {
        if node.dock-window-id == root.child && node.children.length == 0: DockedWindowView {
            docked-window-id: node.dock-window-id;
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "horizontal": DockedWindowHorizontalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurseEnd {
                layout: layout;
                child: nested-child;
            }
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "vertical": DockedWindowVerticalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurseEnd {
                layout: layout;
                child: nested-child;
            }
        }
    }
}

export component DockRecurse2 inherits Rectangle {
    in property <[DockedWindowLayoutNode]> layout;
    in property <string> child;
    for node in layout: Rectangle {
        if node.dock-window-id == root.child && node.children.length == 0: DockedWindowView {
            docked-window-id: node.dock-window-id;
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "horizontal": DockedWindowHorizontalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse3 {
                layout: layout;
                child: nested-child;
            }
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "vertical": DockedWindowVerticalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse3 {
                layout: layout;
                child: nested-child;
            }
        }
    }
}

export component DockRecurse1 inherits Rectangle {
    in property <[DockedWindowLayoutNode]> layout;
    in property <string> child;
    for node in layout: Rectangle {
        if node.dock-window-id == root.child && node.children.length == 0: DockedWindowView {
            docked-window-id: node.dock-window-id;
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "horizontal": DockedWindowHorizontalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse2 {
                layout: layout;
                child: nested-child;
            }
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "vertical": DockedWindowVerticalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse2 {
                layout: layout;
                child: nested-child;
            }
        }
    }
}

export component DockRecurse0 inherits Rectangle {
    in property <[DockedWindowLayoutNode]> layout;
    in property <string> child;
    for node in layout: Rectangle {
        // (No leaf nodes in first recurse)
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "horizontal": DockedWindowHorizontalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse1 {
                layout: layout;
                child: nested-child;
            }
        }
        if node.dock-window-id == root.child && node.children.length > 0 && node.split-orientation == "vertical": DockedWindowVerticalSplitter {
            layout: layout;
            children: node.children;
            for nested-child in node.children: DockRecurse1 {
                layout: layout;
                child: nested-child;
            }
        }
    }
}

// This is mega stupid, but due to lack of recursion support, this is the only way. The strategy is as follows:
// Iterate over all children "pseudo-recursively" starting from the root. There is no actual recursion support, so we hard code N deep
// iterations. We start with "root", and check for any leaf nodes. These get turned into dock windows. Rinse and repeat.
export component DockRoot inherits Rectangle {
    in-out property <[DockedWindowLayoutNode]> layout;
    background: Theme.background-primary;
    // Pseudo-recurse starting from the root.
    DockRecurse0 {
        layout: layout;
        child: "root";
    }
}
