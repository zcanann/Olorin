import { Theme } from "./../../theme.slint";

import { DockedWindowView } from "../../views/docking/docked_window_view.slint";
import { OutputView } from "../../views/output/output_view.slint";
import { PropertyViewerView } from "../../views/property_viewer/property_viewer_view.slint";
import { ProcessSelectorView } from "../../views/process_selector/process_selector_view.slint";
import { ProjectExplorerView } from "../../views/project_explorer/project_explorer_view.slint";
import { ScanResultsView } from "../../views/scan_results/scan_results_view.slint";
import { SettingsView } from "../../views/settings/settings_view.slint";
import { DockRootViewModelBindings } from "./../../view_model_bindings.slint";

export component DockRoot inherits Rectangle {
    // This binding only exists to force Slint to send the width and height to Rust.
    // This allows for Slint and Rust to reach an agreement as to what the available width and height for the dock space is.
    // The function just returns 0, so the x is not actually modified in this process.
    x: DockRootViewModelBindings.update-dock-root-size(root.width, root.height);
    background: Theme.background-primary;
    init => {
        // These may no longer be needed.
        DockRootViewModelBindings.initial-dock-root-width = root.width;
        DockRootViewModelBindings.initial-dock-root-height = root.height;
    }
    // This is much less responsive than the hack solution for updating dock root size, so we'll stick with the hack above.
    /*
    changed width => {
        // DockRootViewModelBindings.update-dock-root-width(root.width);
    }
    changed height => {
        // DockRootViewModelBindings.update-dock-root-height(root.height)
    }*/

    // 'Settings' window
    settings-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.settings-panel;
        SettingsView { }
    }

    // 'ScanResults' window
    scan-results-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.scan-results-panel;
        ScanResultsView { }
    }

    // 'Output' window
    output-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.output-panel;
        OutputView { }
    }

    // 'ProcessSelector' window
    process-selector-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.process-selector-panel;
        ProcessSelectorView { }
    }

    // 'PropertyViewer' window
    property-viewer-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.property-viewer-panel;
        PropertyViewerView { }
    }

    // 'ProjectExplorer' window
    project-explorer-panel := DockedWindowView {
        docked-window-data <=> DockRootViewModelBindings.project-explorer-panel;
        ProjectExplorerView { }
    }
}
