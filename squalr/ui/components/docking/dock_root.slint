import { Theme } from "./../../theme.slint";
import { DockedWindowView } from "../../views/docking/docked_window_view.slint";
import { OutputView } from "../../views/output_view.slint";
import { PropertyViewerView } from "../../views/property_viewer_view.slint";
import { ProcessSelectorView } from "../../views/process_selector_view.slint";
import { ProjectExplorerView } from "../../views/project_explorer_view.slint";
import { ScanResultsView } from "../../views/scan_results_view.slint";
import { SettingsView } from "../../views/settings_view.slint";
import { DockedWindowViewModelBindings } from "./../../view_model_bindings.slint";

export component DockRoot inherits Rectangle {
    // This binding only exists to force Slint to send the width and height to Rust.
    // This allows for Slint and Rust to reach an agreement as to what the available width and height for the dock space is.
    // The function just returns 0, so the x is not actually modified in this process.
    x: DockedWindowViewModelBindings.update_dock_root_size(root.width, root.height);
    background: Theme.background-primary;
    // This is much less responsive than the hack solution, so we'll stick with the hack.
    /*
    changed width => {
        DockedWindowViewModelBindings.update_dock_root_width(root.width)
    }
    changed height => {
        DockedWindowViewModelBindings.update_dock_root_height(root.height)
    }*/

    // 'Settings' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.settings-panel;
        SettingsView { }
    }

    // 'ScanResults' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.scan-results-panel;
        ScanResultsView { }
    }

    // 'Output' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.output-panel;
        OutputView { }
    }

    // 'ProcessSelector' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.process-selector-panel;
        ProcessSelectorView { }
    }

    // 'PropertyViewer' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.property-viewer-panel;
        PropertyViewerView { }
    }

    // 'ProjectExplorer' window
    DockedWindowView {
        docked-window-data <=> DockedWindowViewModelBindings.project-explorer-panel;
        ProjectExplorerView { }
    }
}
