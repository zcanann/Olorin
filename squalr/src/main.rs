pub mod callback;
pub mod cli_log_listener;
pub mod views;

use crate::views::main_window_view::MainWindowView;
use cli_log_listener::CliLogListener;
use squalr_engine_architecture::vectors::vectors;
use squalr_engine_common::logging::log_level::LogLevel;
use squalr_engine_common::logging::logger::Logger;

// Makes the code generated by compiled .slint files available to our Rust code.
slint::include_modules!();

pub fn main() {
    // Initialize cli log listener to route log output to command line.
    let cli_log_listener = CliLogListener::new();

    Logger::get_instance().subscribe(cli_log_listener);

    let hardware_vector_size = vectors::get_hardware_vector_size();
    let hardware_vector_name = vectors::get_hardware_vector_name();

    Logger::get_instance().log(LogLevel::Info, "Logger initialized", None);
    Logger::get_instance().log(
        LogLevel::Info,
        format!(
            "CPU vector size for accelerated scans: {:?} bytes ({:?} bits), architecture: {}",
            hardware_vector_size,
            hardware_vector_size * 8,
            hardware_vector_name,
        )
        .as_str(),
        None,
    );

    // Run the slint window event loop until slint::quit_event_loop() is called.
    MainWindowView::new().run_event_loop();
}
